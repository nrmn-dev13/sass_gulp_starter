// fonts
$fontRoboto: "Roboto";
$fontBebas: "bebasneue";
// mixins
%clearfix{
  &:after {
    content: " ";
    display: table;
    clear: both;
    visibility: hidden;
    line-height: 0;
    height: 0;
  }
}

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, font-url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin background-image-retina($file, $type, $width, $height, $positionX: left, $positionY: top, $background-repeat: no-repeat, $cover: '') {
  background-image: image-url($file + '.' + $type);
  @if $cover == 'cover' {
    background-size: $cover;
  } @else {
    background-size: $width $height;
  }
  width: $width;
  height: $height;
  background-position: $positionX $positionY;
  background-repeat: $background-repeat;

  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 144dpi) {
    & {
      background-image: image-url($file + '@2x.' + $type);
      // background-size: $width*2 $height*2;
      // width: $width*2; height: $height*2;
    }
  }
}

@mixin svg($path, $width, $height, $position: 50% 50%, $background-size: 100%){
  background-image: image-url('#{$path}.png');
  background-image: image-url('#{$path}.svg');
  background-position: $position;
  background-repeat: no-repeat;
  background-size: $background-size;
  width: $width;
  height: $height;
}

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

@mixin filter-grayscale($values: 1) {
   @if $values == 1 {
    -webkit-filter: grayscale(1);
    -webkit-filter: grayscale(100%);
    filter: gray;
    filter: grayscale(100%);
    filter: image-url('desaturate.svg#greyscale');
  } @else {
    -webkit-filter: none;
    filter: none;
  }
}

@mixin backdrop-filter($values) {
  -webkit-backdrop-filter: $values;
  backdrop-filter: $values;
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// @mixin flexbox() {
//   display: -webkit-box;
//   display: -moz-box;
//   display: -ms-flexbox;
//   display: -webkit-flex;
//   display: flex;
// }

// @mixin inline-flexbox() {
//   display: -webkit-inline-box;
//   display: -moz-inline-box;
//   display: -ms-inline-flexbox;
//   display: -webkit-inline-flex;
//   display: inline-flex;
// }

// @mixin flex-wrap($values) {
//   -webkit-flex-wrap: $values;
//   -moz-flex-wrap:  $values;
//   -ms-flex-wrap:  $values;
//   flex-wrap:  $values;
// }

// @mixin flex($values) {
//   -webkit-box-flex: $values;
//   -moz-box-flex:  $values;
//   -webkit-flex:  $values;
//   -ms-flex:  $values;
//   flex:  $values;
// }

// @mixin flex-flow($values) {
//   -webkit-flex-flow: $values;
//   -moz-flex-flow: $values;
//   -ms-flex-flow: $values;
//   flex-flow: $values;
// }

// @mixin flex-direction($values) {
//   -webkit-flex-direction: $values;
//   -moz-flex-direction:  $values;
//   -webkit-flex-direction:  $values;
//   -ms-flex-direction:  $values;
//   flex-direction:  $values;
// }

// @mixin align-content($values) {
//   -webkit-align-content: $values;
//   // -moz-align-content: $values;
//   -moz-box-align: $values;
//   -ms-flex-line-pack: $values;
//   align-content: $values;
// }

// @mixin align-items($values) {
//   -webkit-box-align: $values;
//   -webkit-align-items: $values;
//   -moz-align-items: $values;
//   -ms-flex-align: $values;
//   align-items: $values;
// }

// @mixin justify-content($values) {
//   -webkit-justify-content: $values;
//   -moz-justify-content: $values;
//   -ms-justify-content: $values;
//   justify-content: $values;
// }

@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}

@mixin flex-grow($val) {
  -webkit-flex-grow: $val;
  -moz-flex-grow: $val;
  -ms-flex-positive: $val;
  flex-grow: $val;
}

@mixin flex-shrink($val) {
  -webkit-flex-shrink: $val;
  -moz-flex-shrink: $val;
  -ms-flex-negative: $val;
  flex-shrink: $val;
}

@mixin align-self($val) {
  -webkit-align-self: $val;
  -moz-align-self: $val;
  -ms-align-self: $val;
  align-self: $val;
}

@mixin appearance($value){
  -webkit-appearance: $value;
     -moz-appearance: $value;
      -ms-appearance: $value;
       -o-appearance: $value;
          appearance: $value;
}

@mixin transition($value){
  -webkit-transition: $value;
     -moz-transition: $value;
      -ms-transition: $value;
       -o-transition: $value;
          transition: $value;
}

@mixin truncate {
  text-overflow: ellipsis;
    white-space: nowrap;
       overflow: hidden;
}

@mixin padding-box{
  -webkit-background-clip: padding-box;
     -moz-background-clip: padding;
       -o-background-clip: padding;
      -ms-background-clip: padding;
          background-clip: padding-box;
}

@mixin border-box {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
       -o-box-sizing: border-box;
      -ms-box-sizing: border-box;
          box-sizing: border-box;
}

@mixin border-radius($radius: 3px, $direction: 'all') {
  @if $direction == 'all' {
    -webkit-border-radius: $radius;
       -moz-border-radius: $radius;
        -ms-border-radius: $radius;
            border-radius: $radius;
  }

  @if $direction == 'left'{
    -webkit-border-radius: $radius 0px 0px $radius;
       -moz-border-radius: $radius 0px 0px $radius;
        -ms-border-radius: $radius 0px 0px $radius;
            border-radius: $radius 0px 0px $radius;
  }

  @if $direction == 'right'{
    -webkit-border-radius: 0px $radius $radius 0px;
       -moz-border-radius: 0px $radius $radius 0px;
        -ms-border-radius: 0px $radius $radius 0px;
            border-radius: 0px $radius $radius 0px;
  }
   @if $direction == 'top'{
    -webkit-border-radius: $radius $radius 0px 0px;
       -moz-border-radius: $radius $radius 0px 0px;
        -ms-border-radius: $radius $radius 0px 0px;
            border-radius: $radius $radius 0px 0px;
  }

 @if $direction == 'bottom'{
    -webkit-border-radius: 0px 0px $radius $radius;
       -moz-border-radius: 0px 0px $radius $radius;
        -ms-border-radius: 0px 0px $radius $radius;
            border-radius: 0px 0px $radius $radius;
  }
}

@mixin arrow($direction, $size, $color) {
  height: 0;
  width: 0;

  @if $direction == 'up' {
    border-bottom: $size solid $color;
     border-right: $size solid transparent;
      border-left: $size solid transparent;

  }

  @if $direction == 'down' {
    border-right: $size solid transparent;
     border-left: $size solid transparent;
      border-top: $size solid $color
  }

  @if $direction == 'left' {
    border-bottom: $size solid transparent;
     border-right: $size solid $color;
       border-top: $size solid transparent;
  }

  @if $direction == 'right' {
    border-bottom: $size solid transparent;
      border-left: $size solid $color;
       border-top: $size solid transparent;
  }
}

@mixin box-shadow($top, $left, $blur, $width : 0px, $color:'', $inset: false) {
  @if $inset {
    -webkit-box-shadow: inset $top $left $blur $width $color;
       -moz-box-shadow: inset $top $left $blur $width $color;
            box-shadow: inset $top $left $blur $width $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $width $color;
       -moz-box-shadow: $top $left $blur $width $color;
            box-shadow: $top $left $blur $width $color;
  }
}

@mixin animation($animate...) {
  $max: length($animate);
  $animations: '';

  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};

    @if $i < $max {
      $animations: #{$animations + ", "};
    }
  }
  -webkit-animation: $animations;
  -moz-animation:    $animations;
  -o-animation:      $animations;
  -ms-animation:     $animations;
  animation:         $animations;
}

@mixin animation-duration($duration) {
  -webkit-animation-duration: $duration;
  -moz-animation-duration:    $duration;
  -o-animation-duration:      $duration;
  -ms-animation-duration:     $duration;
  animation-duration:         $duration;
}

@mixin animation-delay($duration) {
  -webkit-animation-delay: $duration;
  -moz-animation-delay: $duration;
  animation-delay: $duration;
}

@mixin animation-fill-mode($value) {
  -webkit-animation-fill-mode: $value;
  -moz-animation-fill-mode: $value;
  animation-fill-mode: $value;
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @-ms-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}

@mixin transform($params){
  -webkit-transform: $params;
     -moz-transform: $params;
      -ms-transform: $params;
          transform: $params;
}

@mixin placeholder {
  $placeholders: ":-webkit-input" ":-moz" ":-ms";
  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

@mixin appearance($params) {
  -webkit-appearance: none;
  -moz-appearance: none;
  -ms-appearance: none;
  -o-appearance: none;
  appearance: none;
}

// Positioning helpers
@mixin position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);
    @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
      #{$o}: nth($args, $i + 1);
    }
  }
  position: $position;
}
@mixin absolute($args: '') {
  @include position(absolute, $args);
}
@mixin fixed($args: '') {
  @include position(fixed, $args);
}
@mixin relative($args: '') {
  @include position(relative, $args);
}

@mixin wrap() {
  white-space: pre-wrap;
  white-space: -moz-pre-wrap;
  white-space: -pre-wrap;
  white-space: -o-pre-wrap;
  word-wrap: break-word;
}

@mixin break-word {
  overflow-wrap: break-word;
      word-wrap: break-word;

  -ms-word-break: break-word;
      word-break: break-word;
}